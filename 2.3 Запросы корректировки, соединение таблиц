/* Запросы на обновление, связанные таблицы

Для книг, которые уже есть на складе (в таблице book), но по другой цене, чем в поставке (supply),  необходимо в таблице book увеличить количество на значение, указанное в поставке,  и пересчитать цену. А в таблице  supply обнулить количество этих книг. */


UPDATE book INNER JOIN author ON book.author_id=author.author_id INNER JOIN supply ON supply.author=author.name_author
SET book.amount= book.amount+supply.amount , supply.amount = 0, book.price= (book.price*book.amount + supply.price*supply.amount)/(book.amount+supply.amount)
WHERE book.title=supply.title  AND book.price <> supply.price;
SELECT * FROM book;
SELECT * FROM supply;

/*Включить новых авторов в таблицу author с помощью запроса на добавление, а затем вывести все данные из таблицы author.  Новыми считаются авторы, которые есть в таблице supply, но нет в таблице author.
*/

INSERT INTO author 
SELECT author.name_author, supply.author
FROM author 
    RIGHT JOIN supply ON author.name_author = supply.author
    WHERE name_author IS NULL;

/*
Добавить новые книги из таблицы supply в таблицу book на основе сформированного выше запроса. Затем вывести для просмотра таблицу book.
*/

INSERT INTO book (title,author_id, price, amount)
SELECT title, author_id, price, amount
FROM author     
INNER JOIN supply ON author.name_author = supply.author
WHERE amount >0;


/*  Занести для книги «Стихотворения и поэмы» Лермонтова жанр «Поэзия», а для книги «Остров сокровищ» Стивенсона - «Приключения». (Использовать два запроса).
*/


UPDATE book 
SET genre_id = (SELECT genre_id FROM genre WHERE name_genre = 'Поэзия')
WHERE book_id = 10;

UPDATE book 
SET genre_id = (SELECT genre_id FROM genre WHERE name_genre = 'Приключения')
WHERE book_id = 11;

/*
Удалить всех авторов и все их книги, общее количество книг которых меньше 20.
*/

DELETE FROM author
WHERE author_id IN 
(SELECT author_id 
FROM book 
GROUP BY author_id 
HAVING SUM( amount) <20);

/* Удаление записей главной таблицы с сохранением записей в зависимой

*/
DELETE genre 
FROM genre
WHERE genre_id IN (
SELECT genre_id 
FROM book
GROUP BY genre_id


/* Удалить всех авторов, которые пишут в жанре "Поэзия". Из таблицы book удалить все книги этих авторов. В запросе для отбора авторов использовать полное название жанра, а не его id.
*/
DELETE
FROM author
USING author 
INNER JOIN book USING(author_id)
INNER JOIN genre USING(genre_id)
WHERE name_genre = 'Поэзия';

SELECT * FROM book;
SELECT * FROM author;

HAVING COUNT(amount)<4);

/*Вывести все заказы Баранова Павла (id заказа, какие книги, по какой цене и в каком количестве он заказал) в отсортированном по номеру заказа и названиям книг виде.*/

SELECT buy_id,title,price, buy_book.amount
FROM client
INNER JOIN buy ON buy.client_id = client.client_id
INNER JOIN buy_book  USING (buy_id)
INNER JOIN book USING (book_id)
WHERE name_client = 'Баранов Павел'
ORDER BY buy_id, title;

/*
Посчитать, сколько раз была заказана каждая книга, для книги вывести ее автора (нужно посчитать, в каком количестве заказов фигурирует каждая книга).  Вывести фамилию и инициалы автора, название книги, последний столбец назвать Количество. Результат отсортировать сначала  по фамилиям авторов, а потом по названиям книг.
*/
SELECT  name_author, title, count(buy_book.amount) AS 'Количество'
FROM  author
INNER JOIN book USING (author_id)
LEFT JOIN buy_book USING (book_id)
GROUP BY name_author, title
ORDER BY name_author, title;

/* Вывести города, в которых живут клиенты, оформлявшие заказы в интернет-магазине. Указать количество заказов в каждый город, этот столбец назвать Количество. Информацию вывести по убыванию количества заказов, а затем в алфавитном порядке по названию городов.

*/
SELECT name_city, count(buy_id) AS Количество
FROM city 
INNER JOIN client USING (city_id)
INNER JOIN buy USING (client_id)
GROUP BY name_city
ORDER BY Количество DESC, name_city;

/* Вывести номера всех оплаченных заказов и даты, когда они были оплачены.

*/
SELECT buy_id , date_step_end 
FROM buy_step
WHERE date_step_end IS not Null AND step_id=1;

/*
Вывести информацию о каждом заказе: его номер, кто его сформировал (фамилия пользователя) и его стоимость (сумма произведений количества заказанных книг и их цены), в отсортированном по номеру заказа виде. Последний столбец назвать Стоимость.

*/

SELECT buy_id, name_client, SUM(buy_book.amount*price) AS Стоимость
FROM buy 
INNER JOIN client USING(client_id)
INNER JOIN buy_book USING(buy_id)
INNER JOIN book USING(book_id)
GROUP BY buy_id
ORDER BY buy_id;

/*
Вывести номера заказов (buy_id) и названия этапов,  на которых они в данный момент находятся. Если заказ доставлен –  информацию о нем не выводить. Информацию отсортировать по возрастанию buy_id.
*/
SELECT buy_id, name_step
FROM buy_step
INNER JOIN step USING (step_id)
WHERE date_step_beg Is NOT NULL and date_step_end IS NULL
ORDER BY buy_id;

/*
В таблице city для каждого города указано количество дней, за которые заказ может быть доставлен в этот город (рассматривается только этап Транспортировка). Для тех заказов, которые прошли этап транспортировки, вывести количество дней за которое заказ реально доставлен в город. А также, если заказ доставлен с опозданием, указать количество дней задержки, в противном случае вывести 0. В результат включить номер заказа (buy_id), а также вычисляемые столбцы Количество_дней и Опоздание. Информацию вывести в отсортированном по номеру заказа виде.
*/
SELECT  buy_id, DATEDIFF(date_step_end, date_step_beg)  AS Количество_дней,  IF(DATEDIFF(date_step_end, date_step_beg)> days_delivery, DATEDIFF(date_step_end,date_step_beg) - days_delivery, 0) AS Опоздание
FROM buy_step
INNER JOIN buy USING (buy_id)
INNER JOIN client USING (client_id)
INNER JOIN city USING (city_id)
WHERE step_id = 3 and date_step_end IS NOT NULL;

/*
Выбрать всех клиентов, которые заказывали книги Достоевского, информацию вывести в отсортированном по алфавиту виде. В решении используйте фамилию автора, а не его id.


*/
SELECT name_client
FROM buy 
INNER JOIN client USING(client_id)
INNER JOIN buy_book USING(buy_id)
INNER JOIN book USING(book_id)
INNER JOIN author USING(author_id)
WHERE name_author = 'Достоевский Ф.М.'
GROUP BY name_client
ORDER BY name_client;


/* 

*/

SELECT genre.name_genre, SUM(buy_book.amount) AS Количество
FROM genre
    JOIN book USING (genre_id)
    JOIN buy_book USING(book_id)
GROUP BY genre.name_genre
HAVING SUM(buy_book.amount) = (SELECT MAX(Количество) AS Максимум
     FROM (SELECT genre.name_genre, SUM(buy_book.amount) AS Количество
     FROM genre
     JOIN book USING (genre_id)
     JOIN buy_book USING (book_id)
     GROUP BY genre.name_genre) AB);

/*
Сравнить ежемесячную выручку от продажи книг за текущий и предыдущий годы. Для этого вывести год, месяц, сумму выручки в отсортированном сначала по возрастанию месяцев, затем по возрастанию лет виде. Название столбцов: Год, Месяц, Сумма.

*/

SELECT Year(date_step_end) AS Год, MONTHNAME(date_step_end) AS Месяц, SUM(book.price*buy_book.amount) AS Сумма
FROM buy_step
INNER JOIN buy_book USING(buy_id)
INNER JOIN book USING(book_id)
INNER JOIN step USING(step_id)
WHERE name_step = "Оплата" AND date_step_end IS NOT Null 
GROUP BY Year(date_step_end),MONTHNAME(date_step_end)

UNION 

SELECT Year(date_payment), MONTHNAME(date_payment),SUM(price*amount) AS Сумма
FROM
buy_archive
GROUP BY Year(date_payment),monthname(date_payment)
ORDER BY Месяц, Год
;
